---
title: "Tweaking project.el"
date: 2021-09-11T19:54:46-05:00
type: posts
tags: [ elisp, emacs ]
---

Before knowing about ~project.el~ I used to use ~projectile.el~ to handle all my projects inside emacs, I don't use any much functionality from ~projectile.el~ so I tought it could be better to use just ~project.el~ because is already included inside ~emacs~. The features I commonly use are:

- Easily switch between known projects
- Open a project inside a perspective, using ~perspective.el~, so I can switch between them easily
- Kill all the project related buffers when I "close" the project

These are all the features I need and I was using ~projectile.el~ for so I need to find a replacement in ~project.el~ so I can make the switch

~project.el~ is the builtin package for project management is similar to ~projectile~

hello [fn:hello] [fn:bar]

[fn:hello] emacs.org
[fn:bar] http://vim.com

* Helper functions

First we need some helper functions to access some data from the current project:

#+begin_src emacs-lisp
(defun my/project-root ()
  "Return project root path."
  (cdr (project-current)))

(defun my/project-p ()
  "Return true is the current buffer belongs to a project,
  it's just a wrapper with the `-p' suffix convention"
  (project-current))

(defun my/project-name ()
  "Get project name extracting latest part of project path."
  (if (my/project-p)
      (second (reverse (split-string (my/project-root) "/")))
    nil))
#+end_src

* Kill all the project buffers

This feature is already included in ~projectile.el~ so I needed to write some code to develop it, I basically have to do three things:

- Get a list of all the proejct buffers, we use ~project--buffers-to-kill~ function
- Ask for confirmation and then kill them all, using ~kill-buffer~ function
- Kill the current perspective related to the project to be closed

#+begin_src emacs-lisp
(defun my/project-kill-buffers ()
  "Kill all the related buffers to the current project and delete its perspective as well."
  (interactive)
  (let* ((project-name (my/project-name))
         (project (project-current))
         (buffers-to-kill (project--buffers-to-kill project)))
    (when (yes-or-no-p (format "Kill %d buffers in %s?" (length buffers-to-kill) (my/project-root)))
      (mapc #'kill-buffer buffers-to-kill)
      (persp-kill project-name))))
#+end_src

* Other helpful functions

#+begin_src emacs-lisp
(defun my/project-edit-dir-locals ()
  "Edit .dir-locals.el file in project root."
  (interactive)
  (find-file (expand-file-name ".dir-locals.el" (my/project-root))))

(defun my/project-edit-direnv ()
  "Edit .envrc file in project root."
  (interactive)
  (find-file (expand-file-name ".envrc" (my/project-root))))
#+end_src


* Switching between projects

~perspective.el~ integration, a new perspective should be "attached" to a project so it's easy to switch between them.

#+begin_src emacs-lisp
(defun my/project-switch ()
  "Switch to a project and trigger switch action."
  (interactive)
  ;; make sure all the projects list is available to be used
  (project--ensure-read-project-list)
  (let* ((projects (mapcar 'car project--list))
         (choice (completing-read "Switch to project: " projects))
         (default-directory choice))
    ;; `default-directory' must be defined so `project.el' can know is in a new project
    (my/project-switch-action)))

(defun my/project-switch-action ()
  "Switch to a new perspective which name is project's name and open `helm-ls-git-ls'."
  (interactive)
  (persp-switch (my/project-name))
  (helm-ls-git-ls))

(defun my/project-kill-buffers ()
  "Kill all the related buffers to the current project and delete its perspective as well."
  (interactive)
  (let* ((project-name (my/project-name))
         (project (project-current))
         (buffers-to-kill (project--buffers-to-kill project)))
    (when (yes-or-no-p (format "Kill %d buffers in %s?" (length buffers-to-kill) (my/project-root)))
      (mapc #'kill-buffer buffers-to-kill)
      (persp-kill project-name))))

(defun my/project-open-new-project ()
  "Open a project for the first time and add it to `project.el' projects list."
  (interactive)
  (let* ((project-path-abs (read-directory-name "Enter project root: "))
         ;; we need to define `default-directory' to be able to get the new project when `project-current' is called
         (default-directory (replace-regexp-in-string (expand-file-name "~") "~" project-path-abs)))
    (project-remember-project (project-current))
    (my/project-switch-action)))
#+end_src

* Glue all the code

The final configuration will map all the functions written before to some key bindings, so they can be used after default prefix ~C-x~ is pressed:

#+begin_src emacs-lisp
(use-package project
  :bind (:map project-prefix-map
              ("D" . 'my/project-edit-direnv)
              ("e" . 'my/project-edit-dir-locals)
              ("k" . 'my/project-kill-buffers)
              ("n" . 'my/project-open-new-project)
              ("p" . 'my/project-switch)))
#+end_src
